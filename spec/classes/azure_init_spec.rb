require 'spec_helper'

describe 'azure_agent', :type => 'class' do
  unsupported_os = {
    supported_os: [
      {
        'operatingsystem'        => 'RedHat',
        'operatingsystemrelease' => ['6','7'],
      },
    ],
  }

  context 'setting all params' do
    on_supported_os(unsupported_os).each do |os, facts|
      let(:facts) { facts }
      let(:params) { {} }

      it { is_expected.to compile.with_all_deps }
      it { is_expected.to contain_class('azure_agent') }

      it {
        is_expected.to contain_package('walinuxagent').with(
          'ensure' => 'present',
          'name'   => 'WALinuxAgent',
        )
      }
      it {
        is_expected.to contain_file('/etc/waagent.conf').with(
          'ensure' => 'file',
          'owner'  => 'root',
          'group'  => 'root',
          'mode'   => '0644',
        )
        .with_content(%r{# Automatically generated by Puppet for})
        .with_content(%r{Provisioning.Enabled=y})
        .with_content(%r{Provisioning.DeleteRootPassword=y})
        .with_content(%r{Provisioning.RegenerateSshHostKeyPair=y})
        .with_content(%r{Provisioning.SshHostKeyPairType=rsa})
        .with_content(%r{Provisioning.MonitorHostName=y})
        .with_content(%r{ResourceDisk.Format=y})
        .with_content(%r{ResourceDisk.Filesystem=ext4})
        .with_content(%r{ResourceDisk.MountPoint=/mnt/resource})
        .with_content(%r{ResourceDisk.EnableSwap=y})
        .with_content(%r{ResourceDisk.SwapSizeMB=4096})
        .with_content(%r{Logs.Verbose=n})
      }
      it {
        is_expected.to contain_service('walinuxagent').with(
          'ensure' => 'running',
          'enable' => 'true',
          'name'   => 'waagent',
        )
      }
    end
    describe 'with custom parameters' do
      let(:params) do
        {
          'provisioning' => 'n',
          'delete_root_password' => 'n',
          'regenerate_ssh_key' => 'n',
          'ssh_key_type' => 'dsa',
          'monitor_hostname' => 'n',
          'resource_disk_format' => 'n',
          'resource_disk_filesystem' => 'ext3',
          'resource_disk_mountpoint' => '/mnt/test',
          'resource_disk_swap' => 'n',
          'resource_disk_swap_size' => 2048,
          'verbose_logs' => 'y',
        }
      end

      it { is_expected.to compile.with_all_deps }
      it { is_expected.to contain_class('azure_agent') }

      it {
        is_expected.to contain_package('walinuxagent').with(
          'ensure' => 'present',
          'name'   => 'WALinuxAgent',
        )
      }
      it {
        is_expected.to contain_file('/etc/waagent.conf').with(
          'ensure' => 'file',
          'owner'  => 'root',
          'group'  => 'root',
          'mode'   => '0644',
        )
        .with_content(%r{# Automatically generated by Puppet for})
        .with_content(%r{Provisioning.Enabled=n})
        .with_content(%r{Provisioning.DeleteRootPassword=n})
        .with_content(%r{Provisioning.RegenerateSshHostKeyPair=n})
        .with_content(%r{Provisioning.SshHostKeyPairType=dsa})
        .with_content(%r{Provisioning.MonitorHostName=n})
        .with_content(%r{ResourceDisk.Format=n})
        .with_content(%r{ResourceDisk.Filesystem=ext3})
        .with_content(%r{ResourceDisk.MountPoint=/mnt/test})
        .with_content(%r{ResourceDisk.EnableSwap=n})
        .with_content(%r{ResourceDisk.SwapSizeMB=2048})
        .with_content(%r{Logs.Verbose=y})
      }
      it {
        is_expected.to contain_service('walinuxagent').with(
          'ensure' => 'running',
          'enable' => 'true',
          'name'   => 'waagent',
        )
      }
    end
    describe 'with an invalid parameter for provisioning' do
      let(:params) do
        {
          'provisioning' => 'yes',
        }
      end

      it { is_expected.to raise_error(Puppet::Error, %r{a match for Enum}) }
    end
  end
end
